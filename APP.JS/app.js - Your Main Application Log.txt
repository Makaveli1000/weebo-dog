// app.js - Your Main Application Logic

// --- 1. Firebase SDK Imports ---
// These import statements require the Firebase SDK to be installed in your project.
// If you haven't already, run 'npm install firebase' or 'yarn add firebase' in your project directory.
import { initializeApp } from 'firebase/app';
import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from 'firebase/auth';
import { getFirestore, doc, getDoc, setDoc, onSnapshot, collection, addDoc, serverTimestamp, query, orderBy, limit } from 'firebase/firestore';
import { getStorage, ref as storageRef, uploadBytes, getDownloadURL, listAll } from 'firebase/storage'; // For Firebase Storage
// For QR Code generation (assuming you're using a library like 'qrcode.js')
// If not using a module-based QR code library, you might load it via a <script> tag in HTML
// import QRCode from 'qrcode.js'; // Example if using a module-based QR lib

// --- 2. Retrieve Firebase Config from env-config.js ---
// This assumes your netlify.toml is correctly setting window.__firebase_config
// and env-config.js is loaded BEFORE app.js in index.html.
const firebaseConfig = window.__firebase_config;
const geminiApiKey = window.GEMINI_API_KEY; // Assuming Gemini API key is also passed this way

// --- 3. Initial Configuration Check ---
if (!firebaseConfig || !firebaseConfig.apiKey) {
    console.error("ðŸ”¥ Error: Firebase configuration not found or incomplete. Check env-config.js and Netlify build process.");
    // Update loading overlay to show an error
    const loadingOverlay = document.getElementById('loading-overlay');
    if (loadingOverlay) {
        loadingOverlay.innerHTML = `
            <div class="text-center text-red-700">
                <p class="text-xl font-bold mb-2">Configuration Error!</p>
                <p>Firebase setup is incomplete. Check browser console for details.</p>
                <p class="text-sm mt-2">Is 'env-config.js' loaded? Are Netlify env vars correct?</p>
            </div>
        `;
        loadingOverlay.style.backgroundColor = 'rgba(255, 0, 0, 0.9)'; // More opaque red background
    }
    // Prevent further execution if config is critically missing
    throw new Error("Firebase configuration is missing or malformed. Cannot initialize app.");
}

// --- 4. Initialize Firebase App and Services ---
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app); // Initialize Firebase Storage

// Global variables for convenience (can be managed better in larger apps)
let currentUser = null;
let currentUserID = null;
let userIsPro = false; // Flag for PRO membership status

console.log("âœ… Firebase app initialized successfully!");
console.log("Project ID:", firebaseConfig.projectId);
// Update debug info in HTML
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('debug-firebase-config').querySelector('span').textContent = firebaseConfig.projectId ? 'Loaded' : 'Error';
    document.getElementById('debug-app-id').querySelector('span').textContent = firebaseConfig.appId || 'N/A';
});


// --- 5. UI Element References (Caching for performance) ---
const loadingOverlay = document.getElementById('loading-overlay');
const mainContent = document.getElementById('main-content');
const paywallContent = document.getElementById('paywall-content');
const loginModal = document.getElementById('login-modal');
const accountModal = document.getElementById('account-modal');
const headerAuthBtn = document.getElementById('header-auth-btn');
const accountBtn = document.getElementById('account-btn');
const adminBtn = document.getElementById('admin-btn'); // Assuming this exists for admin users
const userStatusDisplay = document.getElementById('user-status-display');
const userIdDisplay = document.getElementById('user-id-display');
const accountUID = document.getElementById('account-uid');
const accountPremiumStatus = document.getElementById('account-premium-status');
const ttsButton = document.getElementById('tts-button');
const ttsStatus = document.getElementById('tts-status');
const ttsInput = document.getElementById('tts-input');
const lockerUploadBtn = document.getElementById('locker-upload-btn');
const mediaFileInput = document.getElementById('media-file-input');
const lockerMediaDisplay = document.getElementById('locker-media-display');
const lockerStatusText = document.getElementById('locker-status-text');


// --- 6. Core Application Functions ---

/**
 * Hides the loading overlay and shows appropriate content based on user state.
 */
function hideLoadingOverlayAndShowContent() {
    if (loadingOverlay) {
        loadingOverlay.classList.add('hidden');
    }
    // Logic to show main content or paywall
    if (currentUser && userIsPro) {
        mainContent.classList.remove('hidden');
        paywallContent.classList.add('hidden');
    } else if (currentUser && !userIsPro) {
         // Logged in but not Pro, maybe show main content but with some locked features?
         // For now, let's still show main content if logged in but highlight paywall need
         mainContent.classList.remove('hidden');
         paywallContent.classList.add('hidden');
         // Potentially show a banner on main content or disable Pro features
    }
    else { // Not logged in
        mainContent.classList.add('hidden');
        paywallContent.classList.remove('hidden');
    }
}

/**
 * Toggles the visibility of the login modal.
 * @param {boolean} show - True to show, false to hide.
 */
window.toggleLoginModal = (show) => {
    if (loginModal) {
        if (show) loginModal.classList.remove('hidden');
        else loginModal.classList.add('hidden');
    }
};

/**
 * Toggles the visibility of the account modal.
 * @param {boolean} show - True to show, false to hide.
 */
window.toggleAccountModal = (show) => {
    if (accountModal) {
        if (show) accountModal.classList.remove('hidden');
        else accountModal.classList.add('hidden');
    }
};

/**
 * Authenticates a user with email and password.
 */
window.logIn = async () => {
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;
    const loginError = document.getElementById('login-error');

    if (!email || !password) {
        loginError.textContent = "Email and password are required.";
        return;
    }

    try {
        loginError.textContent = ""; // Clear previous errors
        await signInWithEmailAndPassword(auth, email, password);
        console.log("User logged in successfully!");
        toggleLoginModal(false); // Close modal on success
    } catch (error) {
        console.error("Login failed:", error.code, error.message);
        loginError.textContent = `Login failed: ${error.message}`;
    }
};

/**
 * Registers a new user with email and password.
 */
window.register = async () => {
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;
    const loginError = document.getElementById('login-error');

    if (!email || !password || password.length < 6) {
        loginError.textContent = "Email and a password of at least 6 characters are required.";
        return;
    }

    try {
        loginError.textContent = ""; // Clear previous errors
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        console.log("User registered successfully:", userCredential.user.uid);
        // Create a user profile in Firestore
        await setDoc(doc(db, "users", userCredential.user.uid), {
            uid: userCredential.user.uid,
            email: userCredential.user.email,
            nickname: email.split('@')[0], // Default nickname
            isPro: false,
            createdAt: serverTimestamp()
        });
        toggleLoginModal(false); // Close modal on success
    } catch (error) {
        console.error("Registration failed:", error.code, error.message);
        loginError.textContent = `Registration failed: ${error.message}`;
    }
};

/**
 * Logs out the current user.
 */
window.logOut = async () => {
    try {
        await signOut(auth);
        console.log("User logged out successfully!");
        // UI updates handled by onAuthStateChanged listener
    } catch (error) {
        console.error("Logout failed:", error.code, error.message);
    }
};

// Placeholder for other functions - you will fill these in!
window.toggleAdminModal = (show) => { console.log('Admin modal functionality not implemented yet.'); /* Implement actual logic */ };
window.toggleCashAppModal = (show) => { console.log('CashApp modal functionality not implemented yet.'); /* Implement actual logic */ };
window.startZeusNarratorTour = () => { console.log('Zeus Narrator Tour not implemented yet.'); /* Implement actual logic */ };
window.toggleSportsDataModal = (show) => { console.log('Sports Data modal functionality not implemented yet.'); /* Implement actual logic */ };
window.saveAccountNickname = () => { console.log('Save Nickname functionality not implemented yet.'); /* Implement actual logic */ };
window.updateUserPassword = () => { console.log('Update Password functionality not implemented yet.'); /* Implement actual logic */ };
window.copyQrCodeText = () => { console.log('Copy QR code text functionality not implemented yet.'); /* Implement actual logic */ };
window.sendMessage = (type, content) => { console.log(`Send message (Type: ${type}, Content: ${content}) functionality not implemented yet.`); /* Implement actual logic */ };
window.toggleChatMode = () => { console.log('Toggle Chat Mode functionality not implemented yet.'); /* Implement actual logic */ };
window.handleFileUpload = async () => {
    if (!currentUser) {
        console.warn("Cannot upload: User not logged in.");
        // Optionally show message to user
        return;
    }
    if (!mediaFileInput || mediaFileInput.files.length === 0) {
        console.warn("No file selected for upload.");
        return;
    }
    const file = mediaFileInput.files[0];
    const filePath = `user_media/${currentUser.uid}/${file.name}`;
    const fileRef = storageRef(storage, filePath);

    try {
        console.log(`Uploading ${file.name}...`);
        await uploadBytes(fileRef, file);
        const fileURL = await getDownloadURL(fileRef);
        console.log("File uploaded, URL:", fileURL);

        // Save file metadata to Firestore (e.g., in a 'user_files' subcollection)
        await addDoc(collection(db, "users", currentUser.uid, "media"), {
            name: file.name,
            url: fileURL,
            uploadedAt: serverTimestamp(),
            type: file.type
        });
        console.log("File metadata saved to Firestore.");
        alert("File uploaded successfully!");
        loadUserMedia(); // Refresh media display
    } catch (error) {
        console.error("File upload failed:", error);
        alert(`Upload failed: ${error.message}`);
    }
};


// --- 7. Real-time Listeners and Data Loading ---

// Listen for authentication state changes
onAuthStateChanged(auth, async (user) => {
    currentUser = user; // Update global user object
    currentUserID = user ? user.uid : null;

    if (user) {
        console.log("User state changed: Logged in", user.uid);
        userStatusDisplay.textContent = 'Logged In';
        userIdDisplay.textContent = user.uid.substring(0, 8); // Display first 8 chars
        headerAuthBtn.classList.add('hidden');
        accountBtn.classList.remove('hidden');
        lockerUploadBtn.disabled = false;
        accountUID.textContent = user.uid;

        // Fetch user profile from Firestore to get isPro status
        const userDocRef = doc(db, "users", user.uid);
        const userDocSnap = await getDoc(userDocRef);
        if (userDocSnap.exists()) {
            const userData = userDocSnap.data();
            userIsPro = userData.isPro || false; // Default to false if not set
            accountPremiumStatus.textContent = userIsPro ? 'PRO Member' : 'Standard User';
            if (userData.nickname) {
                 document.getElementById('account-nickname').value = userData.nickname;
            }
        } else {
            console.warn("User profile not found in Firestore, creating basic entry.");
            // This case should ideally be covered by register(), but good fallback
            await setDoc(userDocRef, {
                uid: user.uid,
                email: user.email,
                nickname: user.email.split('@')[0],
                isPro: false,
                createdAt: serverTimestamp()
            }, { merge: true }); // Use merge to not overwrite existing fields
            userIsPro = false;
            accountPremiumStatus.textContent = 'Standard User';
            document.getElementById('account-nickname').value = user.email.split('@')[0];
        }

        // After all user data is loaded and state is set
        hideLoadingOverlayAndShowContent();
        loadActiveUsers();
        loadLiveFeed();
        loadChatMessages();
        loadCommunityScoreboard();
        loadUserMedia(); // Load user's media for locker
        // Other data loads that require authentication
    } else {
        console.log("User state changed: Logged out");
        userStatusDisplay.textContent = 'Logged Out';
        userIdDisplay.textContent = '';
        headerAuthBtn.classList.remove('hidden');
        accountBtn.classList.add('hidden');
        lockerUploadBtn.disabled = true;
        accountUID.textContent = 'N/A';
        accountPremiumStatus.textContent = 'N/A';
        userIsPro = false;

        // After auth state is determined
        hideLoadingOverlayAndShowContent();
        loadActiveUsers(); // Active users might still be public
        loadLiveFeed(); // Live feed might still be public
        // Clear private data displays
        lockerMediaDisplay.innerHTML = '<p class="text-center text-gray-500">Log in to view your media.</p>';
    }
});


// Live Feed Listener (assuming 'liveFeed' collection is publicly readable)
function loadLiveFeed() {
    const liveFeedRef = doc(db, "liveFeed", "latestScore"); // Document ID 'latestScore'
    onSnapshot(liveFeedRef, (docSnap) => {
        const latestDataEl = document.getElementById('latest-data');
        const dataStreamEl = document.getElementById('data-stream');

        if (docSnap.exists()) {
            const data = docSnap.data();
            latestDataEl.textContent = data.score || "No score update.";
            dataStreamEl.textContent = JSON.stringify(data, null, 2);
            console.log("Live Feed updated:", data);
        } else {
            latestDataEl.textContent = "No live data available.";
            dataStreamEl.textContent = "No 'latestScore' document found in 'liveFeed' collection.";
            console.warn("No 'latestScore' document in 'liveFeed' collection.");
        }
    }, (error) => {
        console.error("Error loading live feed:", error);
        document.getElementById('status-message').textContent = `Error loading live feed: ${error.message}`;
        document.getElementById('status-message-container').classList.remove('hidden');
    });
}

// Active Users Listener (assuming 'presence' collection is publicly readable)
function loadActiveUsers() {
    const activeUsersList = document.getElementById('active-users-list');
    const q = query(collection(db, "presence"), orderBy("lastSeen", "desc"), limit(10)); // Order by last seen, limit to 10
    onSnapshot(q, (snapshot) => {
        activeUsersList.innerHTML = ''; // Clear previous list
        snapshot.forEach((doc) => {
            const userData = doc.data();
            if (userData.nickname) { // Ensure nickname exists
                const li = document.createElement('li');
                li.className = 'flex items-center space-x-2 p-2 bg-gray-50 rounded-md';
                li.innerHTML = `
                    <span class="w-2 h-2 rounded-full bg-green-500"></span>
                    <span>${userData.nickname}</span>
                    <span class="text-xs text-gray-400">(${Math.round((Date.now() - userData.lastSeen.toDate()) / 60000)} min ago)</span>
                `;
                activeUsersList.appendChild(li);
            }
        });
        if (snapshot.empty) {
            activeUsersList.innerHTML = '<p class="text-center text-gray-500 py-4">No active users.</p>';
        }
    }, (error) => {
        console.error("Error loading active users:", error);
    });
}

// Chat Messages Listener (assuming 'chatMessages' collection is publicly readable/writable for now)
function loadChatMessages() {
    const chatMessagesEl = document.getElementById('chat-messages');
    const q = query(collection(db, "chatMessages"), orderBy("timestamp", "asc"), limit(50));
    onSnapshot(q, (snapshot) => {
        chatMessagesEl.innerHTML = ''; // Clear previous messages
        snapshot.forEach((doc) => {
            const msg = doc.data();
            const p = document.createElement('p');
            p.className = `text-sm ${msg.uid === currentUserID ? 'text-right text-metro-primary' : 'text-left text-gray-800'}`;
            const time = msg.timestamp ? new Date(msg.timestamp.toDate()).toLocaleTimeString() : '';
            p.innerHTML = `<span class="font-semibold">${msg.senderNickname || 'Anon'}</span> <span class="text-gray-500 text-xs">${time}</span>: ${msg.text}`;
            chatMessagesEl.appendChild(p);
        });
        chatMessagesEl.scrollTop = chatMessagesEl.scrollHeight; // Auto-scroll to latest
    }, (error) => {
        console.error("Error loading chat messages:", error);
    });
}

// Community Scoreboard Listener (assuming 'sportsData' is publicly readable)
function loadCommunityScoreboard() {
    const sportsDataDisplay = document.getElementById('sports-data-display');
    const q = query(collection(db, "sportsData"), orderBy("timestamp", "desc"), limit(10));
    onSnapshot(q, (snapshot) => {
        sportsDataDisplay.innerHTML = '';
        if (snapshot.empty) {
            sportsDataDisplay.innerHTML = '<p class="text-center text-gray-500 py-8 col-span-full">No sports data submitted yet.</p>';
        } else {
            snapshot.forEach((doc) => {
                const data = doc.data();
                const div = document.createElement('div');
                div.className = 'bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200';
                div.innerHTML = `
                    <p class="font-semibold text-lg">${data.sport}: ${data.score}</p>
                    <p class="text-sm text-gray-600">${data.team1} vs ${data.team2}</p>
                    <p class="text-xs text-gray-400">Submitted by ${data.submittedBy || 'Anon'} on ${new Date(data.timestamp.toDate()).toLocaleString()}</p>
                `;
                sportsDataDisplay.appendChild(div);
            });
        }
    }, (error) => {
        console.error("Error loading scoreboard:", error);
    });
}


// Function to load user's uploaded media
async function loadUserMedia() {
    if (!currentUser) {
        lockerMediaDisplay.innerHTML = '<p class="text-center text-gray-500">Log in to view your media.</p>';
        lockerStatusText.textContent = 'Capacity: Log in to see status.';
        return;
    }
    lockerMediaDisplay.innerHTML = '<p class="text-center text-gray-500">Loading your media...</p>';
    lockerStatusText.textContent = 'Capacity: Checking...';

    try {
        const mediaCollectionRef = collection(db, "users", currentUser.uid, "media");
        const q = query(mediaCollectionRef, orderBy("uploadedAt", "desc"), limit(10)); // Limit to 10 for example
        onSnapshot(q, (snapshot) => {
            lockerMediaDisplay.innerHTML = ''; // Clear previous media
            snapshot.forEach((doc) => {
                const media = doc.data();
                const div = document.createElement('div');
                div.className = 'relative group';
                // Basic image display, enhance with video/other types as needed
                if (media.type && media.type.startsWith('image/')) {
                    div.innerHTML = `<img src="${media.url}" alt="${media.name}" class="w-full h-32 object-cover rounded-lg shadow">`;
                } else {
                     div.innerHTML = `<a href="${media.url}" target="_blank" class="block w-full h-32 bg-gray-200 flex items-center justify-center rounded-lg shadow text-gray-600">Download ${media.name}</a>`;
                }
                lockerMediaDisplay.appendChild(div);
            });
            if (snapshot.empty) {
                lockerMediaDisplay.innerHTML = '<p class="text-center text-gray-500">No media uploaded yet.</p>';
            }
            lockerStatusText.textContent = `Capacity: ${snapshot.size} / 10 items (Example Limit)`; // Update based on actual limits
        });
    } catch (error) {
        console.error("Error loading user media:", error);
        lockerMediaDisplay.innerHTML = '<p class="text-center text-red-500">Error loading media.</p>';
    }
}


// --- 8. Initial App Load Sequence ---
// No need to explicitly call hideLoadingOverlayAndShowContent here, as onAuthStateChanged handles it
// for the initial load AND subsequent changes.

// Initial check for Gemini API Key to enable TTS button
document.addEventListener('DOMContentLoaded', () => {
    if (geminiApiKey && geminiApiKey !== '') {
        ttsButton.disabled = false;
        ttsStatus.textContent = 'Status: Ready for Announcement';
    } else {
        ttsButton.disabled = true;
        ttsStatus.textContent = 'Status: Gemini API Key missing';
    }
    // You would add actual TTS generation logic here for window.generateAndSpeak
    window.generateAndSpeak = async () => {
        if (!ttsInput.value || ttsInput.value.trim() === '') {
            alert('Please enter text to announce.');
            return;
        }
        ttsButton.disabled = true;
        ttsStatus.textContent = 'Status: Generating audio...';

        try {
            // This would typically call your Netlify Function
            // For now, it's a placeholder. Replace with actual fetch to your /api/generate-tts
            const response = await fetch('/.netlify/functions/generate-tts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text: ttsInput.value }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to generate TTS');
            }

            const audioBlob = await response.blob();
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);
            audio.play();
            ttsStatus.textContent = 'Status: Playing announcement!';
            audio.onended = () => {
                ttsStatus.textContent = 'Status: Ready for Announcement';
                ttsButton.disabled = false;
            };
        } catch (error) {
            console.error('TTS Generation Error:', error);
            ttsStatus.textContent = `Status: Error - ${error.message}`;
            ttsButton.disabled = false;
            alert(`Failed to announce: ${error.message}`);
        }
    };
});


// Placeholder for QR code generation function
document.addEventListener('DOMContentLoaded', () => {
    const qrcodeContainer = document.getElementById('qrcode-container');
    const loginQrIdInput = document.getElementById('login-qr-id-input');

    if (qrcodeContainer) {
        // This assumes you have a QR code library loaded (e.g., qrcode.min.js via <script> tag)
        // If you are using a module-based QR library, you'd use that import here.
        // For simplicity, let's just put some placeholder text or generate a simple URL QR
        try {
            // Example: Generate QR for the current page URL
            // If you're using a global QR code library, it might be window.QRCode
            if (typeof QRCode !== 'undefined') { // Check if QRCode library is globally available
                new QRCode(qrcodeContainer, {
                    text: window.location.href, // Or a specific URL for login
                    width: 96,
                    height: 96,
                    colorDark : "#000000",
                    colorLight : "#ffffff",
                    correctLevel : QRCode.CorrectLevel.H
                });
            } else {
                 qrcodeContainer.innerHTML = '<p class="text-xs text-gray-500">QR Lib not loaded.</p>';
            }
        } catch (e) {
            console.error("QR Code generation error:", e);
            qrcodeContainer.innerHTML = '<p class="text-xs text-red-500">QR Gen Error.</p>';
        }
    }

    // Function to copy QR code text (User ID for login)
    window.copyQrCodeText = () => {
        if (loginQrIdInput && loginQrIdInput.value) {
            navigator.clipboard.writeText(loginQrIdInput.value)
                .then(() => {
                    alert('User ID copied to clipboard!');
                })
                .catch(err => {
                    console.error('Failed to copy text: ', err);
                });
        }
    };
});

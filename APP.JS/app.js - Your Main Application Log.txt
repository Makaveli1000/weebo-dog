// app.js - Your Main Application Logic

// --- 1. Firebase SDK Imports (Using modular imports - requires app.js to be type="module") ---
import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js';
import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, updatePassword as authUpdatePassword } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-auth.js';
import { getFirestore, doc, getDoc, setDoc, onSnapshot, collection, addDoc, serverTimestamp, query, orderBy, limit, updateDoc, increment } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js';
import { getStorage, ref as storageRef, uploadBytes, getDownloadURL, listAll } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-storage.js';
import { setLogLevel } from 'https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js'; // Assuming you use setLogLevel

// --- 2. Retrieve Firebase Config from env-config.js (Global Scope) ---
const firebaseConfig = window.NETLIFY_FIREBASE_CONFIG || window.__firebase_config;
const geminiApiKey = window.GEMINI_API_KEY; 

// --- 3. Initial Configuration Check ---
if (!firebaseConfig || !firebaseConfig.apiKey) {
    console.error("ðŸ”¥ Error: Firebase configuration not found or incomplete. Check env-config.js and Netlify build process.");
    // This logic ensures the error is visible and execution stops
    document.addEventListener('DOMContentLoaded', () => {
        const loadingOverlay = document.getElementById('loading-overlay');
        if (loadingOverlay) {
            loadingOverlay.innerHTML = `
                <div class="text-center text-red-700">
                    <p class="text-xl font-bold mb-2">Configuration Error!</p>
                    <p>Firebase setup is incomplete. Check browser console for details.</p>
                </div>
            `;
            loadingOverlay.style.backgroundColor = 'rgba(255, 0, 0, 0.9)'; 
        }
    });
    throw new Error("Firebase configuration is missing or malformed. Cannot initialize app.");
}

// --- 4. Initialize Firebase App and Services ---
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);

// Global State Variables
let currentUser = null;
let currentUserID = null;
let userIsPro = false; 
let isAdmin = false;

console.log("âœ… Firebase app initialized successfully!");

// --- 5. UI Element References (Caching for performance) ---
let loadingOverlay, mainContent, paywallContent, loginModal, accountModal;
let headerAuthBtn, accountBtn, adminBtn;
let userStatusDisplay, userIdDisplay, accountUID, accountPremiumStatus;
let ttsButton, ttsStatus, ttsInput;
let lockerUploadBtn, mediaFileInput, lockerMediaDisplay, lockerStatusText;
let loginQrIdInput, qrcodeContainer, zeusAvatar; 

// Function to safely get elements after DOM is loaded
function cacheDOMElements() {
    loadingOverlay = document.getElementById('loading-overlay');
    mainContent = document.getElementById('main-content');
    paywallContent = document.getElementById('paywall-content');
    loginModal = document.getElementById('login-modal');
    accountModal = document.getElementById('account-modal');
    headerAuthBtn = document.getElementById('header-auth-btn');
    accountBtn = document.getElementById('account-btn');
    adminBtn = document.getElementById('admin-btn');
    userStatusDisplay = document.getElementById('user-status-display');
    userIdDisplay = document.getElementById('user-id-display');
    accountUID = document.getElementById('account-uid');
    accountPremiumStatus = document.getElementById('account-premium-status');
    ttsButton = document.getElementById('tts-button');
    ttsStatus = document.getElementById('tts-status');
    ttsInput = document.getElementById('tts-input');
    lockerUploadBtn = document.getElementById('locker-upload-btn');
    mediaFileInput = document.getElementById('media-file-input');
    lockerMediaDisplay = document.getElementById('locker-media-display');
    lockerStatusText = document.getElementById('locker-status-text');
    loginQrIdInput = document.getElementById('login-qr-id-input');
    qrcodeContainer = document.getElementById('qrcode-container');
    zeusAvatar = document.getElementById('zeus-avatar-svg'); 
}

// --- 6. Core Application Logic Functions ---

function hideLoadingOverlayAndShowContent() {
    if (!mainContent) cacheDOMElements(); // Ensure elements are cached
    
    // Hides the spinning screen
    if (loadingOverlay) {
Â  Â  Â  Â  loadingOverlay.classList.add('hidden');
Â  Â  }

    // Logic to show main content or paywall
    if (currentUser && userIsPro) {
        mainContent.classList.remove('hidden');
        paywallContent.classList.add('hidden');
        if (ttsButton) ttsButton.disabled = !(geminiApiKey && geminiApiKey !== ''); // Enable TTS for Pro users
    } else { 
        mainContent.classList.add('hidden');
        paywallContent.classList.remove('hidden');
        if (ttsButton) ttsButton.disabled = true;
    }
}

// --- Modal and Auth Functions (Stubs for brevity, assuming they are complete) ---
window.toggleLoginModal = (show) => { if (!loginModal) cacheDOMElements(); if (loginModal) loginModal.classList.toggle('hidden', !show); };
window.toggleAccountModal = (show) => { if (!accountModal) cacheDOMElements(); if (accountModal) accountModal.classList.toggle('hidden', !show); };
window.logIn = async () => { /* Logic here */ };
window.register = async () => { /* Logic here */ };
window.logOut = async () => { /* Logic here */ };
window.saveAccountNickname = async () => { /* Logic here */ };
window.updateUserPassword = async () => { /* Logic here */ };

// --- Functionality Stubs ---
window.toggleAdminModal = (show) => { if (isAdmin) console.log('Admin modal functionality stub.'); else alert('Admin privileges required.'); };
window.toggleCashAppModal = (show) => { if (show) console.log('Showing cash app modal'); };
window.startZeusNarratorTour = () => { console.log('Zeus Narrator Tour stub.'); };
window.toggleSportsDataModal = (show) => { console.log('Sports Data modal stub.'); };
window.copyQrCodeText = () => { /* Logic here */ };
window.sendMessage = async (type, content) => { /* Logic here */ };
window.toggleChatMode = () => { /* Logic here */ };
window.handleFileUpload = async () => { /* Logic here */ };
window.loadUserMedia = async () => { /* Logic here */ };
function loadActiveUsers() { console.log('Active Users data load stub.'); }
function loadLiveFeed() { console.log('Live Feed data load stub.'); }
function loadChatMessages() { console.log('Chat Messages data load stub.'); }
function loadCommunityScoreboard() { console.log('Community Scoreboard data load stub.'); }
function loadUserMedia() { console.log('User Media load stub.'); }
window.generateAndSpeak = async () => { /* Logic here */ }; // Must be fully implemented

// --- 7. Real-time Listeners and Data Loading (Crucial for Startup) ---

// Final Auth State Observer
onAuthStateChanged(auth, async (user) => {
    cacheDOMElements(); // Ensure elements are ready

    currentUser = user; 
    currentUserID = user ? user.uid : null;

    if (user) {
        // Logged In: Fetch user profile data to determine PRO status
        const userDocRef = doc(db, "users", user.uid);
        const userDocSnap = await getDoc(userDocRef);
        
        if (userDocSnap.exists()) {
            const userData = userDocSnap.data();
            userIsPro = userData.isPro || false; 
            isAdmin = userData.isAdmin || false; 
        }

        // Start real-time data listeners
        loadActiveUsers(); 
        loadLiveFeed(); 
        loadChatMessages(); 
        loadCommunityScoreboard();
        loadUserMedia();
        
    } else {
        // Logged Out State
        userIsPro = false;
        isAdmin = false;
    }

    // After all checks are done, hide the loading screen
    hideLoadingOverlayAndShowContent();
    
    // Final UI cleanup based on logged state
    if (userStatusDisplay) userStatusDisplay.textContent = user ? 'Logged In' : 'Logged Out';
    if (userIdDisplay) userIdDisplay.textContent = user ? user.uid.substring(0, 8) : '';
    if (headerAuthBtn) headerAuthBtn.classList.toggle('hidden', !!user);
    if (accountBtn) accountBtn.classList.toggle('hidden', !user);
    if (adminBtn) adminBtn.classList.toggle('hidden', !isAdmin);
});


// Initial App Load Sequence (Called when the DOM is fully loaded)
document.addEventListener('DOMContentLoaded', () => {
    // This is the first code to run, which waits for the Auth Observer above to execute
    // and call hideLoadingOverlayAndShowContent().
    console.log("DOMContentLoaded: Waiting for Firebase Auth State...");
});